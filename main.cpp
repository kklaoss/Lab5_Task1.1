// Подключение заголовочного файла класса Man
#include "Man.h"
// Подключение стандартной библиотеки ввода/вывода
#include <iostream>
// Подключение библиотеки для форматированного вывода
#include <iomanip>
// Подключение библиотеки для работы с локализацией
#include <clocale>
// Подключение библиотеки для работы с файлами
#include <fstream>
// Определение имени файла с данными
const char filename[] = "dbase.txt";
// Главная функция программы
int main()
{
	// Установка локали для поддержки кириллицы
	setlocale(LC_ALL, "ru");
	// Установка кодовой страницы для консоли (Windows)
	system("chcp 1251");
	// Максимальное количество записей в базе данных
	const int maxn_record = 10;
	// Массив объектов класса Man для хранения данных
	Man man[maxn_record];
	// Буфер для чтения строк из файла
	char buf[l_buf + 1];
	// Открытие файла для чтения
	std::ifstream fin(filename);
	// Проверка, открыт ли файл
	if (!fin)
	{
		// Вывод сообщения об ошибке, если файл не найден
		std::cout << "Нет файла " << filename << std::endl;
		// Завершение программы с кодом ошибки
		return 1;
	}
	// Счетчик для количества прочитанных записей
	int i = 0;
	// Чтение файла построчно
	while (fin.getline(buf, l_buf))
	{
		// Проверка на превышение максимального количества записей
		if (i >= maxn_record)
		{
			// Вывод сообщения об ошибке
			std::cout << "Слишком длинный файл" << std::endl;
			// Завершение программы с кодом ошибки
			return 1;
		}
		// Установка имени из буфера
		man[i].SetName(buf);
		// Установка года рождения из буфера
		man[i].SetBirthYear(buf);
		// Установка зарплаты из буфера
		man[i].SetPay(buf);
		// Увеличение счетчика записей
		i++;
	}
	// Количество прочитанных записей
	int n_record = i;
	// Счетчик найденных сотрудников
	int n_man = 0;
	// Сумма зарплат для расчета среднего значения
	float mean_pay = 0;
	// Бесконечный цикл для поиска сотрудников
	while (true)
	{
		// Запрос фамилии пользователя
		std::cout << "Введите фамилию или слово end: ";
		// Буфер для хранения введенной фамилии
		char name[l_name + 1];
		// Чтение введенной фамилии
		std::cin >> name;

		// Проверка на ввод слова "end" для завершения программы
		if (strcmp(name, "end") == 0)
			break;
		// Флаг для проверки, найден ли сотрудник
		bool found = false;
		// Поиск сотрудника в массиве
		for (i = 0; i < n_record; ++i)
		{
			// Сравнение введенной фамилии с фамилией сотрудника
			if (man[i].CompareName(name))
			{
				// Вывод информации о сотруднике
				man[i].Print();
				// Увеличение счетчика найденных сотрудников
				n_man++;
				// Добавление зарплаты сотрудника к общей сумме
				mean_pay += man[i].GetPay();
				// Установка флага, что сотрудник найден
				found = true;
			}
		}
		// Вывод сообщения, если сотрудник не найден
		if (!found)
			std::cout << "Такого сотрудника нет" << std::endl;
	}
	// Проверка, были ли найдены сотрудники
	if (n_man)
	{
		// Вывод среднего оклада с точностью до 2 знаков после запятой
		std::cout << "Средний оклад: "
			<< std::fixed << std::setprecision(2)
			<< mean_pay / n_man << std::endl;
	}
	// Завершение программы
	return 0;
}